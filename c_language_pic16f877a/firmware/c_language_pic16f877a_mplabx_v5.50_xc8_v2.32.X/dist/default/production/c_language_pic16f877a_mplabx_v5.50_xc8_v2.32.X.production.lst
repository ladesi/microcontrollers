

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Wed Jan 26 09:38:45 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     6                           	psect	strings,global,class=STRING,delta=2,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssEEDATA,global,class=EEDATA,space=3,delta=2,noexec
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    21                           	dabs	1,0x7E,2
    22  0000                     
    23                           ; Version 2.20
    24                           ; Generated 12/02/2020 GMT
    25                           ; 
    26                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F877A Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     	;# 
    58  0001                     	;# 
    59  0002                     	;# 
    60  0003                     	;# 
    61  0004                     	;# 
    62  0005                     	;# 
    63  0006                     	;# 
    64  0007                     	;# 
    65  0008                     	;# 
    66  0009                     	;# 
    67  000A                     	;# 
    68  000B                     	;# 
    69  000C                     	;# 
    70  000D                     	;# 
    71  000E                     	;# 
    72  000E                     	;# 
    73  000F                     	;# 
    74  0010                     	;# 
    75  0011                     	;# 
    76  0012                     	;# 
    77  0013                     	;# 
    78  0014                     	;# 
    79  0015                     	;# 
    80  0015                     	;# 
    81  0016                     	;# 
    82  0017                     	;# 
    83  0018                     	;# 
    84  0019                     	;# 
    85  001A                     	;# 
    86  001B                     	;# 
    87  001B                     	;# 
    88  001C                     	;# 
    89  001D                     	;# 
    90  001E                     	;# 
    91  001F                     	;# 
    92  0081                     	;# 
    93  0085                     	;# 
    94  0086                     	;# 
    95  0087                     	;# 
    96  0088                     	;# 
    97  0089                     	;# 
    98  008C                     	;# 
    99  008D                     	;# 
   100  008E                     	;# 
   101  0091                     	;# 
   102  0092                     	;# 
   103  0093                     	;# 
   104  0094                     	;# 
   105  0098                     	;# 
   106  0099                     	;# 
   107  009C                     	;# 
   108  009D                     	;# 
   109  009E                     	;# 
   110  009F                     	;# 
   111  010C                     	;# 
   112  010D                     	;# 
   113  010E                     	;# 
   114  010F                     	;# 
   115  018C                     	;# 
   116  018D                     	;# 
   117  0000                     	;# 
   118  0001                     	;# 
   119  0002                     	;# 
   120  0003                     	;# 
   121  0004                     	;# 
   122  0005                     	;# 
   123  0006                     	;# 
   124  0007                     	;# 
   125  0008                     	;# 
   126  0009                     	;# 
   127  000A                     	;# 
   128  000B                     	;# 
   129  000C                     	;# 
   130  000D                     	;# 
   131  000E                     	;# 
   132  000E                     	;# 
   133  000F                     	;# 
   134  0010                     	;# 
   135  0011                     	;# 
   136  0012                     	;# 
   137  0013                     	;# 
   138  0014                     	;# 
   139  0015                     	;# 
   140  0015                     	;# 
   141  0016                     	;# 
   142  0017                     	;# 
   143  0018                     	;# 
   144  0019                     	;# 
   145  001A                     	;# 
   146  001B                     	;# 
   147  001B                     	;# 
   148  001C                     	;# 
   149  001D                     	;# 
   150  001E                     	;# 
   151  001F                     	;# 
   152  0081                     	;# 
   153  0085                     	;# 
   154  0086                     	;# 
   155  0087                     	;# 
   156  0088                     	;# 
   157  0089                     	;# 
   158  008C                     	;# 
   159  008D                     	;# 
   160  008E                     	;# 
   161  0091                     	;# 
   162  0092                     	;# 
   163  0093                     	;# 
   164  0094                     	;# 
   165  0098                     	;# 
   166  0099                     	;# 
   167  009C                     	;# 
   168  009D                     	;# 
   169  009E                     	;# 
   170  009F                     	;# 
   171  010C                     	;# 
   172  010D                     	;# 
   173  010E                     	;# 
   174  010F                     	;# 
   175  018C                     	;# 
   176  018D                     	;# 
   177                           
   178                           	psect	idataBANK0
   179  06C1                     __pidataBANK0:
   180                           
   181                           ;initializer for _divisao
   182  06C1  3466               	retlw	102
   183  06C2  3466               	retlw	102
   184  06C3  34A6               	retlw	166
   185  06C4  343F               	retlw	63
   186                           
   187                           	psect	idataCOMMON
   188  06C5                     __pidataCOMMON:
   189                           
   190                           ;initializer for _sum1
   191  06C5  3488               	retlw	136
   192  06C6  3413               	retlw	19
   193                           
   194                           ;initializer for _acc1
   195  06C7  342C               	retlw	44
   196  06C8  3401               	retlw	1
   197                           
   198                           ;initializer for _num1
   199  06C9  3408               	retlw	8
   200                           
   201                           ;initializer for _letra
   202  06CA  3461               	retlw	97
   203                           
   204                           	psect	strings
   205  0003                     __pstrings:
   206  0003                     stringtab:
   207  0003                     __stringtab:
   208  0003                     stringcode:	
   209                           ;	String table - string pointers are 1 byte each
   210                           
   211  0003                     stringdir:
   212  0003  3000               	movlw	high stringdir
   213  0004  008A               	movwf	10
   214  0005  0804               	movf	4,w
   215  0006  0A84               	incf	4,f
   216  0007  0782               	addwf	2,f
   217  0008                     __stringbase:
   218  0008  3400               	retlw	0
   219  0009                     __end_of__stringtab:
   220  0009                     _tabela:
   221  0009  3434               	retlw	52
   222  000A  3456               	retlw	86
   223  000B                     __end_of_tabela:
   224                           
   225                           	psect	cinit
   226  07C4                     start_initialization:	
   227                           ; #config settings
   228                           
   229  07C4                     __initialization:
   230                           
   231                           ; Initialize objects allocated to BANK0
   232  07C4  1383               	bcf	3,7	;select IRP bank0
   233  07C5  3024               	movlw	low (__pdataBANK0+4)
   234  07C6  00FD               	movwf	btemp+-1
   235  07C7  3006               	movlw	high __pidataBANK0
   236  07C8  00FE               	movwf	btemp
   237  07C9  30C1               	movlw	low __pidataBANK0
   238  07CA  00FF               	movwf	btemp+1
   239  07CB  3020               	movlw	low __pdataBANK0
   240  07CC  0084               	movwf	4
   241  07CD  120A  118A  26EA  120A  118A  	fcall	init_ram0
   242                           
   243                           ; Initialize objects allocated to COMMON
   244  07D2  120A  118A  26C5  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   245  07D7  00F0               	movwf	__pdataCOMMON& (0+127)
   246  07D8  120A  118A  26C6  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
   247  07DD  00F1               	movwf	(__pdataCOMMON+1)& (0+127)
   248  07DE  120A  118A  26C7  120A  118A  	fcall	__pidataCOMMON+2	;fetch initializer
   249  07E3  00F2               	movwf	(__pdataCOMMON+2)& (0+127)
   250  07E4  120A  118A  26C8  120A  118A  	fcall	__pidataCOMMON+3	;fetch initializer
   251  07E9  00F3               	movwf	(__pdataCOMMON+3)& (0+127)
   252  07EA  120A  118A  26C9  120A  118A  	fcall	__pidataCOMMON+4	;fetch initializer
   253  07EF  00F4               	movwf	(__pdataCOMMON+4)& (0+127)
   254  07F0  120A  118A  26CA  120A  118A  	fcall	__pidataCOMMON+5	;fetch initializer
   255  07F5  00F5               	movwf	(__pdataCOMMON+5)& (0+127)
   256                           
   257                           ; Clear objects allocated to BANK0
   258  07F6  01A4               	clrf	__pbssBANK0& (0+127)
   259  07F7  01A5               	clrf	(__pbssBANK0+1)& (0+127)
   260                           
   261                           ; Clear objects allocated to COMMON
   262  07F8  01F6               	clrf	__pbssCOMMON& (0+127)
   263  07F9  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   264  07FA  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   265  07FB  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   266  07FC                     end_of_initialization:	
   267                           ;End of C runtime variable initialization code
   268                           
   269  07FC                     __end_of__initialization:
   270  07FC  0183               	clrf	3
   271  07FD  120A  118A  2ED3   	ljmp	_main	;jump to C main() function
   272                           
   273                           	psect	bssEEDATA
   274  0000                     __pbssEEDATA:
   275  0000                     _title:
   276  0000  0000               	db	0
   277  0001  0000               	db	0
   278  0002  0000               	db	0
   279  0003  0000               	db	0
   280  0004  0000               	db	0
   281  0005  0000               	db	0
   282  0006  0000               	db	0
   283  0007  0000               	db	0
   284  0008  0000               	db	0
   285  0009  0000               	db	0
   286  000A  0000               	db	0
   287  000B  0000               	db	0
   288  000C  0000               	db	0
   289  000D  0000               	db	0
   290  000E  0000               	db	0
   291  000F  0000               	db	0
   292  0010  0000               	db	0
   293  0011  0000               	db	0
   294  0012  0000               	db	0
   295  0013  0000               	db	0
   296                           
   297                           	psect	bssCOMMON
   298  0076                     __pbssCOMMON:
   299  0076                     _logEntry:
   300  0076                     	ds	2
   301  0078                     _flag1:
   302  0078                     	ds	1
   303  0079                     _var1:
   304  0079                     	ds	1
   305                           
   306                           	psect	dataCOMMON
   307  0070                     __pdataCOMMON:
   308  0070                     _sum1:
   309  0070                     	ds	2
   310  0072                     _acc1:
   311  0072                     	ds	2
   312  0074                     _num1:
   313  0074                     	ds	1
   314  0075                     _letra:
   315  0075                     	ds	1
   316                           
   317                           	psect	bssBANK0
   318  0024                     __pbssBANK0:
   319  0024                     _ad_read:
   320  0024                     	ds	2
   321                           
   322                           	psect	dataBANK0
   323  0020                     __pdataBANK0:
   324  0020                     _divisao:
   325  0020                     	ds	4
   326                           
   327                           	psect	inittext
   328  06E6                     init_fetch0:	
   329                           ;	Called with low address in FSR and high address in W
   330                           
   331  06E6  087E               	movf	btemp,w
   332  06E7  008A               	movwf	10
   333  06E8  087F               	movf	btemp+1,w
   334  06E9  0082               	movwf	2
   335  06EA                     init_ram0:	
   336                           ;Called with:
   337                           ;	high address of idata address in btemp 
   338                           ;	low address of idata address in btemp+1 
   339                           ;	low address of data in FSR
   340                           ;	high address + 1 of data in btemp-1
   341                           
   342  06EA  120A  118A  26E6  120A  118A  	fcall	init_fetch0
   343  06EF  0080               	movwf	0
   344  06F0  0A84               	incf	4,f
   345  06F1  0804               	movf	4,w
   346  06F2  067D               	xorwf	btemp+-1,w
   347  06F3  1903               	btfsc	3,2
   348  06F4  3400               	retlw	0
   349  06F5  0AFF               	incf	btemp+1,f
   350  06F6  1903               	btfsc	3,2
   351  06F7  0AFE               	incf	btemp,f
   352  06F8  2EEA               	goto	init_ram0
   353                           
   354                           	psect	clrtext
   355  06CB                     clear_ram0:	
   356                           ;	Called with FSR containing the base address, and
   357                           ;	W with the last address+1
   358                           
   359  06CB  0064               	clrwdt	;clear the watchdog before getting into this loop
   360  06CC                     clrloop0:
   361  06CC  0180               	clrf	0	;clear RAM location pointed to by FSR
   362  06CD  0A84               	incf	4,f	;increment pointer
   363  06CE  0604               	xorwf	4,w	;XOR with final address
   364  06CF  1903               	btfsc	3,2	;have we reached the end yet?
   365  06D0  3400               	retlw	0	;all done for this memory range, return
   366  06D1  0604               	xorwf	4,w	;XOR again to restore value
   367  06D2  2ECC               	goto	clrloop0	;do the next byte
   368                           
   369                           	psect	cstackCOMMON
   370  007A                     __pcstackCOMMON:
   371  007A                     ?_functions_c_coding:
   372  007A                     ??_functions_c_coding:	
   373                           ; 1 bytes @ 0x0
   374                           
   375  007A                     ?_binary_logic:	
   376                           ; 1 bytes @ 0x0
   377                           
   378  007A                     ??_binary_logic:	
   379                           ; 1 bytes @ 0x0
   380                           
   381  007A                     ?_assembly_instructions:	
   382                           ; 1 bytes @ 0x0
   383                           
   384  007A                     ??_assembly_instructions:	
   385                           ; 1 bytes @ 0x0
   386                           
   387  007A                     ?_main:	
   388                           ; 1 bytes @ 0x0
   389                           
   390                           
   391                           ; 1 bytes @ 0x0
   392  007A                     	ds	1
   393  007B                     functions_c_coding@i:
   394                           
   395                           ; 2 bytes @ 0x1
   396  007B                     	ds	2
   397  007D                     ??_main:
   398                           
   399                           	psect	maintext
   400  06D3                     __pmaintext:	
   401                           ; 1 bytes @ 0x3
   402 ;;
   403 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   404 ;;
   405 ;; *************** function _main *****************
   406 ;; Defined at:
   407 ;;		line 114 in file "main.c"
   408 ;; Parameters:    Size  Location     Type
   409 ;;		None
   410 ;; Auto vars:     Size  Location     Type
   411 ;;		None
   412 ;; Return value:  Size  Location     Type
   413 ;;                  1    wreg      void 
   414 ;; Registers used:
   415 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   416 ;; Tracked objects:
   417 ;;		On entry : B00/0
   418 ;;		On exit  : 0/0
   419 ;;		Unchanged: 0/0
   420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   421 ;;      Params:         0       0       0       0       0
   422 ;;      Locals:         0       0       0       0       0
   423 ;;      Temps:          0       0       0       0       0
   424 ;;      Totals:         0       0       0       0       0
   425 ;;Total ram usage:        0 bytes
   426 ;; Hardware stack levels required when called: 1
   427 ;; This function calls:
   428 ;;		_assembly_instructions
   429 ;;		_binary_logic
   430 ;;		_functions_c_coding
   431 ;; This function is called by:
   432 ;;		Startup code after reset
   433 ;; This function uses a non-reentrant model
   434 ;;
   435                           
   436                           
   437                           ;psect for function _main
   438  06D3                     _main:
   439  06D3                     l713:	
   440                           ;incstack = 0
   441                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   442                           
   443                           
   444                           ;main.c: 117:     functions_c_coding();
   445  06D3  120A  118A  2755  120A  118A  	fcall	_functions_c_coding
   446  06D8                     l715:
   447                           
   448                           ;main.c: 118:     binary_logic();
   449  06D8  120A  118A  26F9  120A  118A  	fcall	_binary_logic
   450  06DD                     l717:
   451                           
   452                           ;main.c: 119:     assembly_instructions();
   453  06DD  120A  118A  26BE  120A  118A  	fcall	_assembly_instructions
   454  06E2                     l54:	
   455                           ;main.c: 122:     while(1)
   456                           
   457  06E2                     l55:	
   458                           ;main.c: 123:     {;main.c: 125:     }
   459                           
   460  06E2  2EE2               	goto	l54
   461  06E3  120A  118A  2800   	ljmp	start
   462  06E6                     __end_of_main:
   463                           
   464                           	psect	text1
   465  0755                     __ptext1:	
   466 ;; *************** function _functions_c_coding *****************
   467 ;; Defined at:
   468 ;;		line 15 in file "main.c"
   469 ;; Parameters:    Size  Location     Type
   470 ;;		None
   471 ;; Auto vars:     Size  Location     Type
   472 ;;  i               2    1[COMMON] int 
   473 ;; Return value:  Size  Location     Type
   474 ;;                  1    wreg      void 
   475 ;; Registers used:
   476 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
   477 ;; Tracked objects:
   478 ;;		On entry : 0/0
   479 ;;		On exit  : 0/0
   480 ;;		Unchanged: 0/0
   481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   482 ;;      Params:         0       0       0       0       0
   483 ;;      Locals:         2       0       0       0       0
   484 ;;      Temps:          1       0       0       0       0
   485 ;;      Totals:         3       0       0       0       0
   486 ;;Total ram usage:        3 bytes
   487 ;; Hardware stack levels used: 1
   488 ;; This function calls:
   489 ;;		Nothing
   490 ;; This function is called by:
   491 ;;		_main
   492 ;; This function uses a non-reentrant model
   493 ;;
   494                           
   495                           
   496                           ;psect for function _functions_c_coding
   497  0755                     _functions_c_coding:
   498  0755                     l649:	
   499                           ;incstack = 0
   500                           ; Regs used in _functions_c_coding: [wreg-fsr0h+status,2+status,0+btemp+1]
   501                           
   502  0755                     l653:	
   503                           ;main.c: 18:     if (flag1 == 1)
   504                           
   505                           
   506                           ;main.c: 23:     {;main.c: 24:         letra = 'e';
   507  0755  3065               	movlw	101
   508  0756  00FA               	movwf	??_functions_c_coding
   509  0757  087A               	movf	??_functions_c_coding,w
   510  0758  00F5               	movwf	_letra
   511  0759  2F67               	goto	l663
   512  075A                     l655:
   513                           
   514                           ;main.c: 31:             sum1 = 2;
   515  075A  3002               	movlw	2
   516  075B  00F0               	movwf	_sum1
   517  075C  3000               	movlw	0
   518  075D  00F1               	movwf	_sum1+1
   519                           
   520                           ;main.c: 32:             break;
   521  075E  2F74               	goto	l665
   522  075F                     l657:
   523                           
   524                           ;main.c: 34:             sum1 = 3;
   525  075F  3003               	movlw	3
   526  0760  00F0               	movwf	_sum1
   527  0761  3000               	movlw	0
   528  0762  00F1               	movwf	_sum1+1
   529                           
   530                           ;main.c: 35:             break;
   531  0763  2F74               	goto	l665
   532  0764                     l659:
   533                           
   534                           ;main.c: 37:             sum1 = 0;
   535  0764  01F0               	clrf	_sum1
   536  0765  01F1               	clrf	_sum1+1
   537                           
   538                           ;main.c: 38:             break;
   539  0766  2F74               	goto	l665
   540  0767                     l663:
   541                           
   542                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   543                           ; Switch size 1, requested type "simple"
   544                           ; Number of cases is 1, Range of values is 0 to 0
   545                           ; switch strategies available:
   546                           ; Name         Instructions Cycles
   547                           ; simple_byte            4     3 (average)
   548                           ; direct_byte           11     8 (fixed)
   549                           ; jumptable            260     6 (fixed)
   550                           ;	Chosen strategy is simple_byte
   551  0767  3000               	movlw	0
   552  0768  3A00               	xorlw	0	; case 0
   553  0769  1903               	skipnz
   554  076A  2F6C               	goto	l723
   555  076B  2F64               	goto	l659
   556  076C                     l723:
   557                           
   558                           ; Switch size 1, requested type "simple"
   559                           ; Number of cases is 2, Range of values is 97 to 98
   560                           ; switch strategies available:
   561                           ; Name         Instructions Cycles
   562                           ; simple_byte            7     4 (average)
   563                           ; direct_byte           17    11 (fixed)
   564                           ; jumptable            263     9 (fixed)
   565                           ;	Chosen strategy is simple_byte
   566  076C  3065               	movlw	101
   567  076D  3A61               	xorlw	97	; case 97
   568  076E  1903               	skipnz
   569  076F  2F5A               	goto	l655
   570  0770  3A03               	xorlw	3	; case 98
   571  0771  1903               	skipnz
   572  0772  2F5F               	goto	l657
   573  0773  2F64               	goto	l659
   574  0774                     l665:
   575                           
   576                           ;main.c: 42:     for(int i=1; i<=10; i++)
   577  0774  3001               	movlw	1
   578  0775  00FB               	movwf	functions_c_coding@i
   579  0776  3000               	movlw	0
   580  0777  00FC               	movwf	functions_c_coding@i+1
   581  0778                     l671:
   582                           
   583                           ;main.c: 43:     {;main.c: 44:         sum1 = sum1 + 1;
   584  0778  0870               	movf	_sum1,w
   585  0779  3E01               	addlw	1
   586  077A  00F0               	movwf	_sum1
   587  077B  0871               	movf	_sum1+1,w
   588  077C  1803               	skipnc
   589  077D  3E01               	addlw	1
   590  077E  3E00               	addlw	0
   591  077F  00F1               	movwf	_sum1+1
   592  0780                     l673:
   593                           
   594                           ;main.c: 45:     }
   595  0780  3001               	movlw	1
   596  0781  07FB               	addwf	functions_c_coding@i,f
   597  0782  1803               	skipnc
   598  0783  0AFC               	incf	functions_c_coding@i+1,f
   599  0784  3000               	movlw	0
   600  0785  07FC               	addwf	functions_c_coding@i+1,f
   601  0786                     l675:
   602  0786  087C               	movf	functions_c_coding@i+1,w
   603  0787  3A80               	xorlw	128
   604  0788  00FF               	movwf	btemp+1
   605  0789  3080               	movlw	128
   606  078A  027F               	subwf	btemp+1,w
   607  078B  1D03               	skipz
   608  078C  2F8F               	goto	u15
   609  078D  300B               	movlw	11
   610  078E  027B               	subwf	functions_c_coding@i,w
   611  078F                     u15:
   612  078F  1C03               	skipc
   613  0790  2F92               	goto	u11
   614  0791  2F93               	goto	u10
   615  0792                     u11:
   616  0792  2F78               	goto	l671
   617  0793                     u10:
   618  0793  2F9C               	goto	l679
   619  0794                     l677:
   620                           
   621                           ;main.c: 49:     {;main.c: 50:         sum1 = sum1 + 1;
   622  0794  0870               	movf	_sum1,w
   623  0795  3E01               	addlw	1
   624  0796  00F0               	movwf	_sum1
   625  0797  0871               	movf	_sum1+1,w
   626  0798  1803               	skipnc
   627  0799  3E01               	addlw	1
   628  079A  3E00               	addlw	0
   629  079B  00F1               	movwf	_sum1+1
   630  079C                     l679:
   631                           
   632                           ;main.c: 48:     while(sum1 < 20)
   633  079C  0871               	movf	_sum1+1,w
   634  079D  3A80               	xorlw	128
   635  079E  00FF               	movwf	btemp+1
   636  079F  3080               	movlw	128
   637  07A0  027F               	subwf	btemp+1,w
   638  07A1  1D03               	skipz
   639  07A2  2FA5               	goto	u25
   640  07A3  3014               	movlw	20
   641  07A4  0270               	subwf	_sum1,w
   642  07A5                     u25:
   643  07A5  1C03               	skipc
   644  07A6  2FA8               	goto	u21
   645  07A7  2FA9               	goto	u20
   646  07A8                     u21:
   647  07A8  2F94               	goto	l677
   648  07A9                     u20:
   649  07A9                     l681:
   650                           
   651                           ;main.c: 55:     {;main.c: 56:         sum1 = sum1 + 1;
   652  07A9  0870               	movf	_sum1,w
   653  07AA  3E01               	addlw	1
   654  07AB  00F0               	movwf	_sum1
   655  07AC  0871               	movf	_sum1+1,w
   656  07AD  1803               	skipnc
   657  07AE  3E01               	addlw	1
   658  07AF  3E00               	addlw	0
   659  07B0  00F1               	movwf	_sum1+1
   660  07B1                     l683:
   661                           
   662                           ;main.c: 57:     }while(sum1 < 30);
   663  07B1  0871               	movf	_sum1+1,w
   664  07B2  3A80               	xorlw	128
   665  07B3  00FF               	movwf	btemp+1
   666  07B4  3080               	movlw	128
   667  07B5  027F               	subwf	btemp+1,w
   668  07B6  1D03               	skipz
   669  07B7  2FBA               	goto	u35
   670  07B8  301E               	movlw	30
   671  07B9  0270               	subwf	_sum1,w
   672  07BA                     u35:
   673  07BA  1C03               	skipc
   674  07BB  2FBD               	goto	u31
   675  07BC  2FBE               	goto	u30
   676  07BD                     u31:
   677  07BD  2FA9               	goto	l681
   678  07BE                     u30:
   679  07BE                     l685:
   680                           
   681                           ;main.c: 60:     var1.byte = 0xA2;
   682  07BE  30A2               	movlw	162
   683  07BF  00FA               	movwf	??_functions_c_coding
   684  07C0  087A               	movf	??_functions_c_coding,w
   685  07C1  00F9               	movwf	_var1
   686  07C2                     l687:
   687                           
   688                           ;main.c: 61:     var1.bits.bit0 = 0;
   689  07C2  1079               	bcf	_var1,0
   690  07C3                     l41:
   691  07C3  0008               	return
   692  07C4                     __end_of_functions_c_coding:
   693                           
   694                           	psect	text2
   695  06F9                     __ptext2:	
   696 ;; *************** function _binary_logic *****************
   697 ;; Defined at:
   698 ;;		line 64 in file "main.c"
   699 ;; Parameters:    Size  Location     Type
   700 ;;		None
   701 ;; Auto vars:     Size  Location     Type
   702 ;;		None
   703 ;; Return value:  Size  Location     Type
   704 ;;                  1    wreg      void 
   705 ;; Registers used:
   706 ;;		wreg, status,2, status,0
   707 ;; Tracked objects:
   708 ;;		On entry : 0/0
   709 ;;		On exit  : 0/0
   710 ;;		Unchanged: 0/0
   711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   712 ;;      Params:         0       0       0       0       0
   713 ;;      Locals:         0       0       0       0       0
   714 ;;      Temps:          3       0       0       0       0
   715 ;;      Totals:         3       0       0       0       0
   716 ;;Total ram usage:        3 bytes
   717 ;; Hardware stack levels used: 1
   718 ;; This function calls:
   719 ;;		Nothing
   720 ;; This function is called by:
   721 ;;		_main
   722 ;; This function uses a non-reentrant model
   723 ;;
   724                           
   725                           
   726                           ;psect for function _binary_logic
   727  06F9                     _binary_logic:
   728  06F9                     l693:	
   729                           ;incstack = 0
   730                           ; Regs used in _binary_logic: [wreg+status,2+status,0]
   731                           
   732                           
   733                           ;main.c: 67:     num1 = num1 << 1;
   734  06F9  0874               	movf	_num1,w
   735  06FA  00FA               	movwf	??_binary_logic
   736  06FB  077A               	addwf	??_binary_logic,w
   737  06FC  00FB               	movwf	??_binary_logic+1
   738  06FD  087B               	movf	??_binary_logic+1,w
   739  06FE  00F4               	movwf	_num1
   740                           
   741                           ;main.c: 68:     num1 = num1 >> 2;
   742  06FF  0874               	movf	_num1,w
   743  0700  00FA               	movwf	??_binary_logic
   744  0701  3002               	movlw	2
   745  0702                     u45:
   746  0702  1003               	clrc
   747  0703  1BFA               	btfsc	??_binary_logic,7
   748  0704  1403               	setc
   749  0705  0CFA               	rrf	??_binary_logic,f
   750  0706  3EFF               	addlw	-1
   751  0707  1D03               	skipz
   752  0708  2F02               	goto	u45
   753  0709  087A               	movf	??_binary_logic,w
   754  070A  00FB               	movwf	??_binary_logic+1
   755  070B  087B               	movf	??_binary_logic+1,w
   756  070C  00F4               	movwf	_num1
   757                           
   758                           ;main.c: 71:     num1 = (num1 << 1) | (num1 >> 7);
   759  070D  0874               	movf	_num1,w
   760  070E  00FA               	movwf	??_binary_logic
   761  070F  3007               	movlw	7
   762  0710                     u55:
   763  0710  1003               	clrc
   764  0711  1BFA               	btfsc	??_binary_logic,7
   765  0712  1403               	setc
   766  0713  0CFA               	rrf	??_binary_logic,f
   767  0714  3EFF               	addlw	-1
   768  0715  1D03               	skipz
   769  0716  2F10               	goto	u55
   770  0717  0874               	movf	_num1,w
   771  0718  00FB               	movwf	??_binary_logic+1
   772  0719  077B               	addwf	??_binary_logic+1,w
   773  071A  047A               	iorwf	??_binary_logic,w
   774  071B  00FC               	movwf	??_binary_logic+2
   775  071C  087C               	movf	??_binary_logic+2,w
   776  071D  00F4               	movwf	_num1
   777                           
   778                           ;main.c: 72:     num1 = (num1 >> 1) | (num1 << 7);
   779  071E  0874               	movf	_num1,w
   780  071F  00FA               	movwf	??_binary_logic
   781  0720  3007               	movlw	7
   782  0721                     u65:
   783  0721  1003               	clrc
   784  0722  0DFA               	rlf	??_binary_logic,f
   785  0723  3EFF               	addlw	-1
   786  0724  1D03               	skipz
   787  0725  2F21               	goto	u65
   788  0726  0874               	movf	_num1,w
   789  0727  00FB               	movwf	??_binary_logic+1
   790  0728  1003               	clrc
   791  0729  1BFB               	btfsc	??_binary_logic+1,7
   792  072A  1403               	setc
   793  072B  0C7B               	rrf	??_binary_logic+1,w
   794  072C  047A               	iorwf	??_binary_logic,w
   795  072D  00FC               	movwf	??_binary_logic+2
   796  072E  087C               	movf	??_binary_logic+2,w
   797  072F  00F4               	movwf	_num1
   798  0730                     l699:
   799                           
   800                           ;main.c: 83:     num1 = num1 | 0b00000001;
   801  0730  0874               	movf	_num1,w
   802  0731  3801               	iorlw	1
   803  0732  00FA               	movwf	??_binary_logic
   804  0733  087A               	movf	??_binary_logic,w
   805  0734  00F4               	movwf	_num1
   806  0735                     l701:
   807                           
   808                           ;main.c: 84:     num1 = ((num1) |= (1 << (0)));
   809  0735  1474               	bsf	_num1,0
   810  0736  0874               	movf	_num1,w
   811  0737  00FA               	movwf	??_binary_logic
   812  0738  087A               	movf	??_binary_logic,w
   813  0739  00F4               	movwf	_num1
   814  073A                     l703:
   815                           
   816                           ;main.c: 87:     num1 = num1 & 0b11111101;
   817  073A  0874               	movf	_num1,w
   818  073B  39FD               	andlw	-3
   819  073C  00FA               	movwf	??_binary_logic
   820  073D  087A               	movf	??_binary_logic,w
   821  073E  00F4               	movwf	_num1
   822  073F                     l705:
   823                           
   824                           ;main.c: 88:     num1 = ((num1) &= ~(1 << (1)));
   825  073F  30FD               	movlw	253
   826  0740  00FA               	movwf	??_binary_logic
   827  0741  087A               	movf	??_binary_logic,w
   828  0742  05F4               	andwf	_num1,f
   829  0743  0874               	movf	_num1,w
   830  0744  00FB               	movwf	??_binary_logic+1
   831  0745  087B               	movf	??_binary_logic+1,w
   832  0746  00F4               	movwf	_num1
   833  0747                     l707:
   834                           
   835                           ;main.c: 91:     num1 = num1 ^ 0b00100000;
   836  0747  0874               	movf	_num1,w
   837  0748  3A20               	xorlw	32
   838  0749  00FA               	movwf	??_binary_logic
   839  074A  087A               	movf	??_binary_logic,w
   840  074B  00F4               	movwf	_num1
   841  074C                     l709:
   842                           
   843                           ;main.c: 92:     num1 = ((num1) ^= (1<<(5)));
   844  074C  3020               	movlw	32
   845  074D  00FA               	movwf	??_binary_logic
   846  074E  087A               	movf	??_binary_logic,w
   847  074F  06F4               	xorwf	_num1,f
   848  0750  0874               	movf	_num1,w
   849  0751  00FB               	movwf	??_binary_logic+1
   850  0752  087B               	movf	??_binary_logic+1,w
   851  0753  00F4               	movwf	_num1
   852  0754                     l46:
   853  0754  0008               	return
   854  0755                     __end_of_binary_logic:
   855                           
   856                           	psect	text3
   857  06BE                     __ptext3:	
   858 ;; *************** function _assembly_instructions *****************
   859 ;; Defined at:
   860 ;;		line 95 in file "main.c"
   861 ;; Parameters:    Size  Location     Type
   862 ;;		None
   863 ;; Auto vars:     Size  Location     Type
   864 ;;		None
   865 ;; Return value:  Size  Location     Type
   866 ;;                  1    wreg      void 
   867 ;; Registers used:
   868 ;;		None
   869 ;; Tracked objects:
   870 ;;		On entry : 0/0
   871 ;;		On exit  : 0/0
   872 ;;		Unchanged: 0/0
   873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   874 ;;      Params:         0       0       0       0       0
   875 ;;      Locals:         0       0       0       0       0
   876 ;;      Temps:          0       0       0       0       0
   877 ;;      Totals:         0       0       0       0       0
   878 ;;Total ram usage:        0 bytes
   879 ;; Hardware stack levels used: 1
   880 ;; This function calls:
   881 ;;		Nothing
   882 ;; This function is called by:
   883 ;;		_main
   884 ;; This function uses a non-reentrant model
   885 ;;
   886                           
   887                           
   888                           ;psect for function _assembly_instructions
   889  06BE                     _assembly_instructions:
   890  06BE                     l711:	
   891                           ;incstack = 0
   892                           ; Regs used in _assembly_instructions: []
   893                           
   894                           
   895                           ;main.c: 99:     __nop();
   896  06BE  0000               	nop
   897  06BF  0000               	nop	;# 
   898  06C0                     l49:
   899  06C0  0008               	return
   900  06C1                     __end_of_assembly_instructions:
   901  007E                     btemp	set	126	;btemp
   902  007E                     wtemp0	set	126
   903                           
   904                           	psect	config
   905                           
   906                           ;Config register CONFIG @ 0x2007
   907                           ;	Oscillator Selection bits
   908                           ;	FOSC = HS, HS oscillator
   909                           ;	Watchdog Timer Enable bit
   910                           ;	WDTE = OFF, WDT disabled
   911                           ;	Power-up Timer Enable bit
   912                           ;	PWRTE = ON, PWRT enabled
   913                           ;	Brown-out Reset Enable bit
   914                           ;	BOREN = ON, BOR enabled
   915                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   916                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
   917                           ;	Data EEPROM Memory Code Protection bit
   918                           ;	CPD = OFF, Data EEPROM code protection off
   919                           ;	Flash Program Memory Write Enable bits
   920                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   921                           ;	In-Circuit Debugger Mode bit
   922                           ;	DEBUG = 0x1, unprogrammed default
   923                           ;	Flash Program Memory Code Protection bit
   924                           ;	CP = OFF, Code protection off
   925  2007                     	org	8199
   926  2007  3FF2               	dw	16370

Data Sizes:
    Strings     0
    Constant    2
    Data        10
    BSS         26
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      3      13
    BANK0            80      0       6
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_binary_logic
    _main->_functions_c_coding

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0      30
              _assembly_instructions
                       _binary_logic
                 _functions_c_coding
 ---------------------------------------------------------------------------------
 (1) _functions_c_coding                                   3     3      0      30
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _binary_logic                                         3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _assembly_instructions                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _assembly_instructions
   _binary_logic
   _functions_c_coding

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0       6       5        7.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      3       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      13      12        0.0%
ABS                  0      0      13       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0      14       0        7.8%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Wed Jan 26 09:38:45 2022

                             pc 0002                              l41 07C3                              l46 0754  
                            l54 06E2                              l55 06E2                              l49 06C0  
                            u10 0793                              u11 0792                              u20 07A9  
                            u21 07A8                              u30 07BE                              u31 07BD  
                            u15 078F                              u25 07A5                              u35 07BA  
                            u45 0702                              u55 0710                              u65 0721  
                            fsr 0004                             l701 0735                             l711 06BE  
                           l703 073A                             l705 073F                             l713 06D3  
                           l707 0747                             l723 076C                             l715 06D8  
                           l709 074C                             l653 0755                             l717 06DD  
                           l671 0778                             l655 075A                             l663 0767  
                           l681 07A9                             l673 0780                             l657 075F  
                           l665 0774                             l649 0755                             l683 07B1  
                           l675 0786                             l659 0764                             l693 06F9  
                           l685 07BE                             l677 0794                             l687 07C2  
                           l679 079C                             l699 0730                             indf 0000  
                          _acc1 0072                            _main 06D3                            _var1 0079  
                          _num1 0074                            _sum1 0070                            btemp 007E  
                          start 0000              _functions_c_coding 0755             ?_functions_c_coding 007A  
                         ?_main 007A                           _flag1 0078                           _letra 0075  
                         _title 0000            __end_of_binary_logic 0755                           pclath 000A  
          ??_functions_c_coding 007A                           status 0003                           wtemp0 007E  
               __initialization 07C4                    __end_of_main 06E6                          ??_main 007D  
                        _tabela 0009                    __pdataCOMMON 0070         __end_of__initialization 07FC  
                __pcstackCOMMON 007A                    __pidataBANK0 06C1           _assembly_instructions 06BE  
         __size_of_binary_logic 005C                      __pbssBANK0 0024                      __pmaintext 06D3  
                  _binary_logic 06F9                      __stringtab 0003                         _ad_read 0024  
                       __ptext1 0755                         __ptext2 06F9                         __ptext3 06BE  
                       _divisao 0020          ?_assembly_instructions 007A                         clrloop0 06CC  
          end_of_initialization 07FC     __size_of_functions_c_coding 006F                   __pidataCOMMON 06C5  
                __end_of_tabela 000B             start_initialization 07C4             functions_c_coding@i 007B  
                    init_fetch0 06E6                     __pdataBANK0 0020                     __pbssEEDATA 0000  
                   __pbssCOMMON 0076                       ___latbits 0002         ??_assembly_instructions 007A  
                     __pstrings 0003                       clear_ram0 06CB                     __stringbase 0008  
    __end_of_functions_c_coding 07C4              __end_of__stringtab 0009                        _logEntry 0076  
                 __size_of_main 0013                   ?_binary_logic 007A                        init_ram0 06EA  
                     stringcode 0003                  ??_binary_logic 007A  __size_of_assembly_instructions 0003  
 __end_of_assembly_instructions 06C1                        stringdir 0003                        stringtab 0003  
